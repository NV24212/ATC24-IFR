# This is a CI/CD workflow that will build and deploy the application to Dokploy.
# It uses a two-stage deployment process:
# 1. Pushing to the `develop` branch deploys to the testing environment.
# 2. Pushing a new tag (e.g., `v1.0.0`) deploys to the production environment.

name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
    tags:
      - 'v*.*.*'

jobs:
  deploy-testing:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: pip install -r backend/requirements.txt

      - name: Run backend tests
        run: python -m unittest discover backend/tests

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:testing

      - name: Deploy backend to testing environment
        run: |
          curl -X POST \
            'https://dokploy.hasmah.xyz/api/application.deploy' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H 'x-api-key: ${{ secrets.DOKPLOY_TESTING_TOKEN }}' \
            -d '{
              "applicationId": "${{ secrets.DOKPLOY_TESTING_BACKEND_APP_ID }}"
            }'

      - name: Deploy frontend to testing environment
        run: |
          curl -X POST \
            'https://dokploy.hasmah.xyz/api/application.deploy' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H 'x-api-key: ${{ secrets.DOKPLOY_TESTING_TOKEN }}' \
            -d '{
              "applicationId": "${{ secrets.DOKPLOY_TESTING_FRONTEND_APP_ID }}"
            }'

  deploy-production:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: pip install -r backend/requirements.txt

      - name: Run backend tests
        run: python -m unittest discover backend/tests

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend:${{ github.ref_name }}

      - name: Deploy backend to production environment
        run: |
          curl -X POST \
            'https://dokploy.hasmah.xyz/api/application.deploy' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H 'x-api-key: ${{ secrets.DOKPLOY_PRODUCTION_TOKEN }}' \
            -d '{
              "applicationId": "${{ secrets.DOKPLOY_PRODUCTION_BACKEND_APP_ID }}"
            }'

      - name: Deploy frontend to production environment
        run: |
          curl -X POST \
            'https://dokploy.hasmah.xyz/api/application.deploy' \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -H 'x-api-key: ${{ secrets.DOKPLOY_PRODUCTION_TOKEN }}' \
            -d '{
              "applicationId": "${{ secrets.DOKPLOY_PRODUCTION_FRONTEND_APP_ID }}"
            }'
